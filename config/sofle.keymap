/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&mt {
	quick-tap-ms = <200>;
	tapping-term-ms = <80>;
};

&lt {
	quick-tap-ms = <200>;
	tapping-term-ms = <80>;
};

/ {
    behaviors {
        pht: positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <400>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <1>;
        };
	lh_pht: left_hand_positional_hold_tap {
	    compatible = "zmk,behavior-hold-tap";
	    label = "POSITIONAL_HOLD_TAP2";
	    #binding-cells = <2>;
	    flavor = "tap-unless-interrupted";
	    tapping-term-ms = <100>;
	    quick-tap-ms = <200>;
	    bindings = <&kp>, <&kp>;
	    hold-trigger-key-positions = <5 6 7 8 9 10>;
	};
	hm: homerow_mods {
	    compatible = "zmk,behavior-hold-tap";
	    label = "HOMEROW_MODS";
	    #binding-cells = <2>;
	    tapping-term-ms = <1000>;
	    quick-tap-ms = <0>;
	    flavor = "tap-preferred";
	    bindings = <&kp>, <&kp>;
	};
	bhm: balanced_homerow_mods{
	    compatible = "zmk,behavior-hold-tap";
	    label = "HOMEROW_MODS";
	    #binding-cells = <2>;
	    tapping-term-ms = <1000>;
	    quick-tap-ms = <0>;
	    flavor = "balanced";
	    bindings = <&kp>, <&kp>;
	};
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
// ------------------------------------------------------------------------------------------------------------
// |  `    |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |       |
// |  ESC  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   | BKSPC |
// |  TAB  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
// | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |  |       |  N   |  M    |  ,    |  .   |   /   | SHIFT |
//               | GUI | ALT  | CTRL | LOWER|  ENTER |  | SPACE | RAISE| CTRL  | ALT   | GUI  |
            bindings = <
&kp GRAVE &kp N1 &kp N2   &kp N3   &kp N4    &kp N5                             &kp N6 &kp N7    &kp N8    &kp N9   &kp N0   &none
&kp TAB   &kp Q  &kp W    &kp E    &kp R     &kp T                              &kp Y  &kp U     &kp I     &kp O    &kp P    &kp BSPC
&kp CAPS  &kp A  &kp S    &kp D    &kp F     &kp G                              &kp H  &kp J     &kp K     &kp L    &kp SEMI &kp SQT
&kp LSHFT &kp Z  &kp X    &kp C    &kp V     &kp B  &kp C_MUTE           &none  &kp N  &kp M     &kp COMMA &kp DOT  &kp FSLH &kp RSHFT
                 &kp TAB  &kp LGUI &mt LALT BSPC &lt 1 SPACE &lt 2 RET   &kp RET    &lt 2 SPACE &lt 1 LANG1  &kp MINUS &kp EQUAL
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        num_layer {
// TODO: Some binds are waiting for shifted keycode support.
// ------------------------------------------------------------------------------------------------------------
// |       |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |  F11  |
// | `     |   1 |   2 |   3  |   4  |   5  |                   |   6  |   7   |   8   |   9  |    0  |  F12  |
// |       |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   |   |
// |       |  =  |  -  |  +   |  {   |  }   |        |  |       |  [   |  ]    |  ;    |  :   |   \   |       |
//               |     |      |      |      |        |  |       |      |       |       |      |
            bindings = <
&kp F11      &kp F1    &kp F2    &kp F3      &kp F4    &kp F5                    &kp F6    &kp F7   &kp F8          &kp F9    &kp F10   &kp F11
&kp F12      &kp LS(GRAVE)    &kp N7    &kp N8  &kp N9   &kp C_AL_CALC          &kp N6    &kp N7   &kp N8          &kp N9    &kp N0    &kp F12
&trans    &kp SLASH &kp N4    &kp N5    &kp N6  &kp STAR                         &kp CARET &kp AMPS &kp KP_MULTIPLY &kp LPAR  &kp RPAR  &kp PIPE
&trans    &kp MINUS &kp N1    &kp N2    &kp N3  &kp PLUS      &trans   &trans  &kp LBKT  &kp RBKT &kp SEMI        &kp COLON &kp BSLH  &trans
                    &kp DOT   &kp N0    &trans    &trans      &trans   &trans &trans    &trans   &trans          &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        fn_layer {
// ------------------------------------------------------------------------------------------------------------
// |BTCLR| BT1  | BT2  |  BT3  |  BT4  |  BT5 |                |      |      |       |      |       |       |
// |     | INS  | PSCR | GUI   |       |      |                | PGUP |      |   ^   |      |       |       |
// |     | ALT  | CTRL | SHIFT |       | CAPS |                | PGDN |   <- |   v   |  ->  |  DEL  | BKSPC |
// |     | UNDO | CUT  | COPY  | PASTE |      |      |  |      |      |      |       |      |       |       |
//              |      |       |       |      |      |  |      |      |      |       |      |
            bindings = <
&bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4             &trans    &kp C_PP  &kp C_VOL_UP   &kp C_VOL_DN    &kp C_MUTE  &trans
&trans     &kp LS(GRAVE)      &kp HOME    &kp UP  &kp END       &kp PG_UP               &kp SQT   &kp HOME  &kp RET  &kp END      &kp BSLH  &trans
&trans     &kp ESC     &kp LEFT    &kp DOWN    &kp RIGHT       &kp PG_DN                &kp LEFT  &kp DOWN  &kp UP   &kp RIGHT &kp COLON &trans
&trans     &kp GRAVE   &kp DEL   &kp RET   &kp LC(LEFT)  &kp LC(RIGHT)  &trans  &trans  &kp N0    &kp LS(LBKT) &kp LS(RBKT)   &kp LS(N9)    &kp LS(N0)  &trans
                        &kp F2       &kp LA(U)       &trans       &trans  &trans   &trans  &trans    &trans    &kp LBKT   &kp RBKT
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };
    };
};
